# https://github.com/brianwcook/konflux-tests/blob/main/test-pipeline.yaml
kind: Pipeline
apiVersion: tekton.dev/v1beta1
metadata:
  name: example-pipeline
spec:
  params:
    - description: "Snapshot of the application"
      name: SNAPSHOT
      default: '{"components": [{"name":"test-app", "containerImage": "quay.io/example/repo:latest"}]}'
      type: string
    - description: "Namespace where the application is running"
      name: NAMESPACE
      default: "default"
      type: string
    - description: "Expected output"
      name: EXPECTED_OUTPUT
      default: "Hello World!"
      type: string
    - name: PLATFORM
      description: "multi-platform-controller platofmr string"
  tasks:
    - name: task-1
      params:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
        - name: PLATFORM
          value: $(params.PLATFORM)
      taskSpec:
        volumes:
          - name: ssh
            secret:
              optional: false
              secretName: multi-platform-ssh-$(context.taskRun.name)
          - emptyDir: {}
            name: workspace
        params:
          - name: SNAPSHOT
        results:
          - name: TEST_OUTPUT
            description: Test output
        steps:
          - name: run-test
            image: registry.access.redhat.com/ubi9/ubi
            env:
              - name: SNAPSHOT
                value: $(params.SNAPSHOT)
            script: |
              #!/bin/bash
              env
              ######
              # Boilerplate setup stuff

              set -o verbose
              set -eu
              set -o pipefail
              mkdir -p ~/.ssh
              if [ -e "/ssh/error" ]; then
                #no server could be provisioned
                cat /ssh/error
                exit 1
              elif [ -e "/ssh/otp" ]; then
              curl --cacert /ssh/otp-ca -XPOST -d @/ssh/otp $(cat /ssh/otp-server) >~/.ssh/id_rsa
              echo "" >> ~/.ssh/id_rsa
              else
                cp /ssh/id_rsa ~/.ssh
              fi
              chmod 0400 ~/.ssh/id_rsa
              export SSH_HOST=$(cat /ssh/host)
              # export BUILD_DIR=$(cat /ssh/user-dir)
              export SSH_ARGS="-o StrictHostKeyChecking=no"
              #mkdir -p scripts
              #echo "$BUILD_DIR"
              #ssh $SSH_ARGS "$SSH_HOST"  mkdir -p "$BUILD_DIR/workspaces" "$BUILD_DIR/scripts" "$BUILD_DIR/tmp"

              ######

              dnf install -y jq openssh-clients

              echo "Snapshot:\n"
              echo ${SNAPSHOT} | jq "."
              echo "1 - works:"
              echo ${SNAPSHOT} | jq ".components"

              echo extracting image pullspec...
              IMAGE=$(echo ${SNAPSHOT} | jq ".components[] | select(.name==\"arm64-test-demo\")"| jq .containerImage | tr -d '"')
              echo IMAGE SPEC: $IMAGE

              # Run custom tests for the given Snapshot here
              # After the tests finish, record the overall result in the RESULT variable


              # Just get some info about the arch of our systems
              REMOTE_ARCH=$(ssh $SSH_ARGS "$SSH_HOST" /bin/bash -c "arch")
              echo -e local arch is: $(arch)
              echo -e remote arch is: $REMOTE_ARCH
              echo "Running Test..."

              ssh $SSH_ARGS "$SSH_HOST" /bin/bash -c "cat /etc/os-release"

              # execute container on remote host


              if [ "$OUTPUT" = 'Hello World!' ]; then
                RESULT="SUCCESS"
                SUCCESSES=1
                FAILURES=0
                echo $RESULT
              else
                RESULT="FAILURE"
                SUCCESSES=0
                FAILURES=1
                echo $RESULT
              fi
              echo "OUTPUT: $OUTPUT"
              echo "{\"timestamp\":\"$(date +%s)\",\"namespace\":\"\",\"successes\":${SUCCESSES},\"failures\":\${FAILURES},\"warnings\":0,\"arch\":$REMOTE_ARCH,\"result\":\"${RESULT}\"}"

              if [ "$RESULT" = 'FAILURE' ]; then
                exit 1
              fi

            securityContext:
              runAsUser: 0
              capabilities:
                add:
                  - SETFCAP
            volumeMounts:
              - mountPath: /ssh
                name: ssh
              - mountPath: /workspace
                name: workspace
                readOnly: true
